plugins {
    id 'cpp'
    id 'java-library'
    id 'google-test'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
    id 'edu.wpi.first.NativeUtils' version '2025.3.0'
    id 'edu.wpi.first.GradleJni' version '1.1.0'
    id 'edu.wpi.first.GradleVsCode' version '2.1.0'
    id 'com.diffplug.spotless' version '6.25.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

if (project.hasProperty('releaseMode')) {
    wpilibRepositories.addAllReleaseRepositories(project)
} else {
    wpilibRepositories.addAllDevelopmentRepositories(project)
}

apply from: 'config.gradle'

dependencies {
    def wpiVersion = '2024.+'
    implementation "edu.wpi.first.cscore:cscore-java:$wpiVersion"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:$wpiVersion"
    implementation "edu.wpi.first.ntcore:ntcore-java:$wpiVersion"
    implementation "edu.wpi.first.wpilibj:wpilibj-java:$wpiVersion"
    implementation "edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:$wpiVersion"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:$wpiVersion"
    implementation "edu.wpi.first.wpimath:wpimath-java:$wpiVersion"
    implementation "edu.wpi.first.wpiunits:wpiunits-java:$wpiVersion"
    implementation "edu.wpi.first.hal:hal-java:$wpiVersion"
    implementation "org.ejml:ejml-simple:0.43.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.17.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.17.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.17.2"
    implementation 'edu.wpi.first.thirdparty.frc2024.opencv:opencv-java:4.8.0-2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
}

apply from: 'publish.gradle'

wrapper {
    gradleVersion '8.4'
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**', '**/docs*/**'
        }
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**', '**/docs*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**', '**/docs*/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**', '**/docs*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    tasks.named('spotlessGroovyGradle').configure {
        dependsOn tasks.named('javadoc')
    }
    tasks.named('spotlessJava').configure {
        dependsOn tasks.named('javadoc')
    }
    tasks.named('spotlessMisc').configure {
        dependsOn tasks.named('javadoc')
    }
    tasks.named('spotlessXml').configure {
        dependsOn tasks.named('javadoc')
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task generateHtmlFromJava {
    def htmlFile = file("$buildDir/generated/index.html")
    outputs.file htmlFile

    doLast {
        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            mainClass = 'crewmate.lib.HtmlGenerator'
        }
    }
}

sourceSets {
    annotationProcessor {
        java {
            srcDir 'src/main/java/crewmate/lib/annotations'
        }
    }
}

javadoc {
    destinationDir = file('docs/')
}

build {
    dependsOn generateHtmlFromJava
}
